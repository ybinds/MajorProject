package com.rihs.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.rihs.binding.CasePlanResponse;
import com.rihs.binding.IncomeDetailsRequest;
import com.rihs.entity.Case;
import com.rihs.entity.Plan;
import com.rihs.exception.CaseNotFoundException;
import com.rihs.exception.PlanNotFoundException;
import com.rihs.repository.CaseRepository;
import com.rihs.repository.PlanRepository;

@Service
public class CaseServiceImpl implements ICaseService {

	@Autowired
	private CaseRepository crepo;

	@Autowired
	private PlanRepository prepo;

	public CasePlanResponse createCase(Long appId) {
		Case c = new Case();

		// I have to verify if the given appId is valid or not, for that I need to
		// inter-communicate with CitizenRegistrationApplicationApi
		// But since I am not running, for now I skipped that once that test is done,
		// then I will add the Feign and set
		// inter-communication
		c.setAppId(appId);
		Case savedCase = crepo.save(c); // create a fresh case
		CasePlanResponse response = new CasePlanResponse();
		response.setCaseNumber(savedCase.getCaseNumber());
		List<Plan> plans = prepo.findAll();
		response.setPlan(plans);
		return response;
	}

	public Long addPlan(Long caseNumber, Integer planId) {
		Case c = null;
		if (caseNumber != null || !crepo.existsById(caseNumber)) { // check if the case number sent exists or not
			throw new CaseNotFoundException("Case " + caseNumber + " IS NOT FOUND");
		} else {
			c = crepo.findById(caseNumber).get();
			c.setCaseNumber(caseNumber); // set case number if exists
			// get plan if exists else throw exception
			Plan plan = prepo.findById(planId).orElseThrow(() -> new PlanNotFoundException("PLAN " + planId + " IS NOT FOUND"));
			c.setPlan(plan);
			crepo.save(c); // update the case record with plan 
		}
		return caseNumber;
	}

	public Long addIncomeDetails(IncomeDetailsRequest request) {
		Case c = new Case();
		
		return null;
	}

}
